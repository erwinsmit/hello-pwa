// px to em
//
// font-size: em(18);
// font-size: em(18px);
//
@function em($pixels, $context: $base-fontsize) {
	@if (unitless($pixels)) {
		$pixels: $pixels * 1px;
	}

	@if (unitless($context)) {
		$context: $context * 1px;
	}

	@return $pixels / $context * 1em;
}

// px to rem
//
// font-size: rem(24);
// font-size: rem(24px);
//
@function rem($pixels) {
	@if (unitless($pixels)) {
		$pixels: $pixels * 1px;
	}

	@return $pixels / $base-fontsize * 1rem;
}

// strip unit
@function strip-units($number) {
	@return $number / ($number * 0 + 1);
}

//  replace characters in a string, used by svg-url($svg)
//
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace +
        str-replace(str-slice($string, $index +
        str-length($search)), $search, $replace);
    }
    @return $string;
}

// generate UTF-8 encoded data uri for using inline svg in sass
//
// background-image: svg-url('<svg>...</svg>');
//
@function svg-url($svg){
    // Chunk up string in order to avoid
    // "SystemStackError: stack level too deep"
    $encoded:'';
    $slice: 2000;
    $index: 0;
    $loops: ceil(str-length($svg)/$slice);
    @for $i from 1 through $loops {
        $chunk: str-slice($svg, $index, $index + $slice - 1);
        $chunk: str-replace($chunk,'"','\'');
        $chunk: str-replace($chunk,'<','%3C');
        $chunk: str-replace($chunk,'>','%3E');
        $chunk: str-replace($chunk,'&','%26');
        $chunk: str-replace($chunk,'#','%23');
        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice;
    }
    @return url("data:image/svg+xml;charset=utf8,#{$encoded}");
}